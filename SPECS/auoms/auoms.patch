diff --git a/build/Makefile b/build/Makefile
--- a/build/Makefile	2020-07-14 13:50:43.000000000 -0700
+++ b/build/Makefile	2020-10-15 11:48:50.361506677 -0700
@@ -24,8 +24,8 @@
 $(error "ENABLE_DEBUG is not set.  Please re-run configure")
 endif
 
-INTERMEDIATE_DIR=$(BASE_DIR)/intermediate/$(BUILD_CONFIGURATION)
-TARGET_DIR := $(BASE_DIR)/target/$(BUILD_CONFIGURATION)
+INTERMEDIATE_DIR=$(BASE_DIR)/intermediate
+TARGET_DIR := $(BASE_DIR)/target
 BUILD_DIR=$(INTERMEDIATE_DIR)/builddir
 RELEASE_DIR=$(BUILD_DIR)/release
 AUOMS_BIN=$(RELEASE_DIR)/bin/auoms
@@ -78,7 +78,7 @@
 
 #--------------------------------------------------------------------------------
 # Build targets
-.PHONY: all clean distclean clean-status kit
+.PHONY: all clean distclean clean-status packages kit
 .PHONY: tests test
 
 all : $(AUOMS_BIN) sepolicy kit
@@ -89,7 +89,7 @@
 
 clean-kit :
 	$(RMDIR) $(BASE_DIR)/target
-	$(RMDIR) $(INTERMEDIATE_DIR)/*.{tar,rpm,deb}
+	$(RMDIR) $(INTERMEDIATE_DIR)/*.{tar,rpm}
 
 distclean : clean
 	-$(RM) $(BASE_DIR)/build/Makefile.version
@@ -131,7 +131,9 @@
 	@echo "========================= Building selinux policy module"
 	$(MKPATH) $(SEPOLICY_DIR)
 	$(COPY) $(SEPOLICY_SRC_DIR)/auoms.te $(SEPOLICY_SRC_DIR)/auoms.fc $(SEPOLICY_DIR)
-	cd $(SEPOLICY_DIR); make -f /usr/share/selinux/devel/Makefile
+	# Will revert this change once SeLinux is supported in Mariner
+	# cd $(SEPOLICY_DIR); make -f /usr/share/selinux/devel/Makefile
+	touch $(SEPOLICY_DIR)/auoms.pp
 else
 $(SEPOLICY_DIR)/auoms.pp : $(SEPOLICY_SRC_DIR)/auoms.te $(SEPOLICY_SRC_DIR)/auoms.fc
 	@echo "========================= Building selinux policy module"
@@ -182,21 +184,28 @@
 # While the "formal build" only builds ULINUX, we may build something else for DEV purposes.
 # Assume we ALWAYS build RPM, but only build DPKG if --enable-ulinux is specified in configure.
 
+$(TARGET_DIR):
+	mkdir -p $(TARGET_DIR)
+
 ifeq ($(ULINUX),1)
 
 ifeq ($(CMAKE_BUILD_TYPE),RelWithDebInfo)
-kit : $(TARGET_DIR)/auoms-bundle-test.sh $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
+
+packages: $(TARGET_DIR) $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm
+
+kit : $(TARGET_DIR)/auoms-bundle-test.sh $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm
 
 $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm : $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm
 	$(COPY) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm
 
-$(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb : $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
-	$(COPY) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
-
 else
+packages: $(TARGET_DIR) $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
 kit : $(TARGET_DIR)/auoms-bundle-test.sh $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh
 endif
 
+$(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm : $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm
+	$(COPY) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm
+
 $(TARGET_DIR)/auoms-bundle-test.sh : $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh
 	$(COPY) ../installer/bundle/auoms-bundle-test.sh $(TARGET_DIR)/auoms-bundle-test.sh
 
@@ -205,13 +214,12 @@
 	$(MKPATH) $(TARGET_DIR)
 	../installer/bundle/create_bundle.sh $(TARGET_DIR) $(INTERMEDIATE_DIR) $(OUTPUT_PACKAGE_PREFIX).tar
 
-$(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).tar : \
-	$(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).deb
+$(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).tar : packages
 
 	@echo "========================= Performing Building .tar file"
 
 	# Build the tar file containing both .rpm and .deb packages
-	cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_PACKAGE_PREFIX).tar $(OUTPUT_PACKAGE_PREFIX).{deb,rpm}
+	cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_PACKAGE_PREFIX).tar $(OUTPUT_PACKAGE_PREFIX).rpm
 
 $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).rpm: $(AUOMS_BIN) sepolicy
 	@echo "========================= Performing Building RPM package"
@@ -237,32 +245,6 @@
 		$(INSTALLER_DATAFILES_RPM)
 	sudo $(RMDIR) $(STAGING_DIR)
 
-$(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).deb: $(AUOMS_BIN) sepolicy
-	@echo "========================= Performing Building DEB package"
-	$(MKPATH) $(INSTALLER_TMPDIR)
-
-	sudo $(RMDIR) $(STAGING_DIR)
-	sudo python $(PAL_DIR)/installer/InstallBuilder/installbuilder.py \
-		--BASE_DIR=$(BASE_DIR) \
-		--TARGET_DIR=$(INTERMEDIATE_DIR) \
-		--INTERMEDIATE_DIR=$(INSTALLER_TMPDIR) \
-		--STAGING_DIR=$(STAGING_DIR) \
-		--BUILD_TYPE=$(BUILD_TYPE) \
-		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
-		--PFARCH=$(PF_ARCH) \
-		--PFDISTRO=$(PF_DISTRO) \
-		--PFMAJOR=$(PF_MAJOR) \
-		--PFMINOR=$(PF_MINOR) \
-		--VERSION=$(AUOMS_BUILDVERSION_MAJOR).$(AUOMS_BUILDVERSION_MINOR).$(AUOMS_BUILDVERSION_PATCH) \
-		--RELEASE=$(AUOMS_BUILDVERSION_BUILDNR) \
-		--VERSION_IDENT="$(AUOMS_BUILDVERSION_DATE) $(AUOMS_BUILDVERSION_STATUS)" \
-		$(DPKG_LOCATION) \
-		--DATAFILE_PATH=$(BASE_DIR)/installer/datafiles \
-		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
-		$(INSTALLER_DATAFILES_DPKG)
-	sudo chown --reference=$(BASE_DIR) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).deb
-	sudo $(RMDIR) $(STAGING_DIR)
-
 ifeq ($(CMAKE_BUILD_TYPE),RelWithDebInfo)
 $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm: $(AUOMS_BIN).debug
 	@echo "========================= Performing Building RPM package"
@@ -288,39 +270,16 @@
 		$(INSTALLER_DATAFILES_RPM)
 	sudo $(RMDIR) $(STAGING_DIR)
 
-$(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb: $(AUOMS_BIN).debug
-	@echo "========================= Performing Building DEB package"
-	$(MKPATH) $(INSTALLER_TMPDIR)
-
-	sudo $(RMDIR) $(STAGING_DIR)
-	sudo python $(PAL_DIR)/installer/InstallBuilder/installbuilder.py \
-		--BASE_DIR=$(BASE_DIR) \
-		--TARGET_DIR=$(INTERMEDIATE_DIR) \
-		--INTERMEDIATE_DIR=$(INSTALLER_TMPDIR) \
-		--STAGING_DIR=$(STAGING_DIR) \
-		--BUILD_TYPE=$(BUILD_TYPE) \
-		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
-		--PFARCH=$(PF_ARCH) \
-		--PFDISTRO=$(PF_DISTRO) \
-		--PFMAJOR=$(PF_MAJOR) \
-		--PFMINOR=$(PF_MINOR) \
-		--VERSION=$(AUOMS_BUILDVERSION_MAJOR).$(AUOMS_BUILDVERSION_MINOR).$(AUOMS_BUILDVERSION_PATCH) \
-		--RELEASE=$(AUOMS_BUILDVERSION_BUILDNR) \
-		--VERSION_IDENT="$(AUOMS_BUILDVERSION_DATE) $(AUOMS_BUILDVERSION_STATUS)" \
-		$(DPKG_LOCATION) \
-		--DATAFILE_PATH=$(BASE_DIR)/installer/datafiles-debug \
-		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX_DEBUG) \
-		$(INSTALLER_DATAFILES_DPKG)
-	sudo chown --reference=$(BASE_DIR) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
-	sudo $(RMDIR) $(STAGING_DIR)
 endif
 
 else
 
 ifeq ($(CMAKE_BUILD_TYPE),RelWithDebInfo)
-kit : $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).$(PACKAGE_SUFFIX) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).deb
+packages : $(TARGET_DIR) $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).$(PACKAGE_SUFFIX) $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX_DEBUG).rpm
+kit: packages
 else
-kit : $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).$(PACKAGE_SUFFIX)
+packages : $(TARGET_DIR) $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).$(PACKAGE_SUFFIX)
+kit: packages
 endif
 
 $(TARGET_DIR)/$(OUTPUT_PACKAGE_PREFIX).$(PACKAGE_SUFFIX) : $(AUOMS_BIN) sepolicy
diff --git a/CollectionMonitor.cpp b/CollectionMonitor.cpp
--- a/CollectionMonitor.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/CollectionMonitor.cpp	2020-10-15 14:43:21.914099396 -0700
@@ -207,15 +207,15 @@
         _builder.CancelEvent();
         return;
     }
-    if (_builder.AddField("pid", std::to_string(pid), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+    if (_builder.AddField("pid", std::to_string(pid), "", field_type_t::UNCLASSIFIED) != 1) {
         _builder.CancelEvent();
         return;
     }
-    if(_builder.AddField("ppid", std::to_string(ppid), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+    if(_builder.AddField("ppid", std::to_string(ppid), "", field_type_t::UNCLASSIFIED) != 1) {
         _builder.CancelEvent();
         return;
     }
-    if(_builder.AddField("exe", exe, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+    if(_builder.AddField("exe", exe, "", field_type_t::UNCLASSIFIED) != 1) {
         _builder.CancelEvent();
         return;
     }
diff --git a/Event.cpp b/Event.cpp
--- a/Event.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/Event.cpp	2020-10-15 14:44:10.713610363 -0700
@@ -421,7 +421,7 @@
     size_t name_size = strlen(field_name);
     size_t raw_size = strlen(raw_value);
     std::string_view interp;
-    if (interp_value != nullptr) {
+    if (interp_value != nullptr && strlen(interp_value) != 0) {
         interp = std::string_view(interp_value, strlen(interp_value));
     }
 
diff --git a/EventTests.cpp b/EventTests.cpp
--- a/EventTests.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/EventTests.cpp	2020-10-15 14:44:51.257204228 -0700
@@ -63,7 +63,7 @@
     if (ret != 1) {
         BOOST_FAIL("BeginRecord failed: " + std::to_string(ret));
     }
-    ret = builder.AddField("field1", "raw1", nullptr, field_type_t::UNCLASSIFIED);
+    ret = builder.AddField("field1", "raw1", "", field_type_t::UNCLASSIFIED);
     if (ret != 1) {
         BOOST_FAIL("AddField failed: " + std::to_string(ret));
     }
diff --git a/installer/bundle/create_bundle.sh b/installer/bundle/create_bundle.sh
--- a/installer/bundle/create_bundle.sh	2020-07-14 13:50:43.000000000 -0700
+++ b/installer/bundle/create_bundle.sh	2020-10-15 11:52:05.299985451 -0700
@@ -115,27 +115,6 @@
 # Fetch the bundle skeleton file
 cp $SOURCE_DIR/$BUNDLE_FILE .
 
-# See if we can resolve git references for output
-# (See if we can find the master project)
-TEMP_FILE=/tmp/create_bundle.$$
-
-# Get the git reference hashes in a file
-(
-cd $SOURCE_DIR/../..
-echo "Entering 'OMS-Auditd-Plugin'" > $TEMP_FILE
-git rev-parse HEAD >> $TEMP_FILE
-cd ../pal
-echo "Entering 'pal'" >> $TEMP_FILE
-git rev-parse HEAD >> $TEMP_FILE
-)
-
-# Change lines like: "Entering 'pal'\n<refhash>" to "pal: <refhash>"
-perl -i -pe "s/Entering '([^\n]*)'\n/\$1: /" $TEMP_FILE
-
-# Grab the reference hashes in a variable
-SOURCE_REFS=`cat $TEMP_FILE`
-rm $TEMP_FILE
-
 # Update the bundle file w/the ref hash (much easier with perl since multi-line)
 perl -i -pe "s/-- Source code references --/${SOURCE_REFS}/" $BUNDLE_FILE
 
diff --git a/Metrics.cpp b/Metrics.cpp
--- a/Metrics.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/Metrics.cpp	2020-10-15 14:46:23.976275931 -0700
@@ -80,47 +80,47 @@
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("version", AUOMS_VERSION, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("version", AUOMS_VERSION, "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("StartTime", system_time_to_iso3339(snap.start_time), nullptr,
+            if (_builder->AddField("StartTime", system_time_to_iso3339(snap.start_time), "",
                                   field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("EndTime", system_time_to_iso3339(snap.end_time), nullptr,
+            if (_builder->AddField("EndTime", system_time_to_iso3339(snap.end_time), "",
                                   field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("Namespace", snap.namespace_name, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("Namespace", snap.namespace_name, "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("Name", snap.name, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("Name", snap.name, "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("SamplePeriod", std::to_string(snap.sample_period), nullptr,
+            if (_builder->AddField("SamplePeriod", std::to_string(snap.sample_period), "",
                                   field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("NumSamples", std::to_string(snap.num_samples), nullptr,
+            if (_builder->AddField("NumSamples", std::to_string(snap.num_samples), "",
                                   field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("Min", std::to_string(snap.min), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("Min", std::to_string(snap.min), "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("Max", std::to_string(snap.max), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("Max", std::to_string(snap.max), "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
-            if (_builder->AddField("Avg", std::to_string(snap.avg), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+            if (_builder->AddField("Avg", std::to_string(snap.avg), "", field_type_t::UNCLASSIFIED) != 1) {
                 _builder->CancelEvent();
                 return false;
             }
diff --git a/OperationalStatus.cpp b/OperationalStatus.cpp
--- a/OperationalStatus.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/OperationalStatus.cpp	2020-10-15 14:46:52.727988196 -0700
@@ -192,12 +192,12 @@
         _builder.CancelEvent();
         return false;
     }
-    if (_builder.AddField("version", AUOMS_VERSION, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+    if (_builder.AddField("version", AUOMS_VERSION, "", field_type_t::UNCLASSIFIED) != 1) {
         _builder.CancelEvent();
         return false;
     }
     if (!errors.empty()) {
-        if (_builder.AddField("errors", errors, nullptr, field_type_t::UNCLASSIFIED) != 1) {
+        if (_builder.AddField("errors", errors, "", field_type_t::UNCLASSIFIED) != 1) {
             _builder.CancelEvent();
             return false;
         }
diff --git a/OutputInputTests.cpp b/OutputInputTests.cpp
--- a/OutputInputTests.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/OutputInputTests.cpp	2020-10-15 14:47:09.019825179 -0700
@@ -39,7 +39,7 @@
         builder->CancelEvent();
         return false;
     }
-    if (builder->AddField("seq", std::to_string(seq), nullptr, field_type_t::UNCLASSIFIED) != 1) {
+    if (builder->AddField("seq", std::to_string(seq), "", field_type_t::UNCLASSIFIED) != 1) {
         builder->CancelEvent();
         return false;
     }
diff --git a/RawEventProcessor.cpp b/RawEventProcessor.cpp
--- a/RawEventProcessor.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/RawEventProcessor.cpp	2020-10-15 14:48:34.222972890 -0700
@@ -567,7 +567,7 @@
         _path_ouid.append(SV_JSON_ARRAY_END);
         _path_ogid.append(SV_JSON_ARRAY_END);
 
-        auto ret = _builder->AddField(SV_PATH_NAME, _path_name, nullptr, field_type_t::UNCLASSIFIED);
+        auto ret = _builder->AddField(SV_PATH_NAME, _path_name, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -576,7 +576,7 @@
             return false;
         }
 
-        ret = _builder->AddField(SV_PATH_NAMETYPE, _path_nametype, nullptr, field_type_t::UNCLASSIFIED);
+        ret = _builder->AddField(SV_PATH_NAMETYPE, _path_nametype, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -585,7 +585,7 @@
             return false;
         }
 
-        ret = _builder->AddField(SV_PATH_MODE, _path_mode, nullptr, field_type_t::UNCLASSIFIED);
+        ret = _builder->AddField(SV_PATH_MODE, _path_mode, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -594,7 +594,7 @@
             return false;
         }
 
-        ret = _builder->AddField(SV_PATH_OUID, _path_ouid, nullptr, field_type_t::UNCLASSIFIED);
+        ret = _builder->AddField(SV_PATH_OUID, _path_ouid, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -603,7 +603,7 @@
             return false;
         }
 
-        ret = _builder->AddField(SV_PATH_OGID, _path_ogid, nullptr, field_type_t::UNCLASSIFIED);
+        ret = _builder->AddField(SV_PATH_OGID, _path_ogid, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -626,7 +626,7 @@
         proctitle_field = EventRecordField();
 
         _execve_converter.Convert(execve_recs, _cmdline);
-        ret = _builder->AddField(SV_CMDLINE, _cmdline, nullptr, field_type_t::UNESCAPED);
+        ret = _builder->AddField(SV_CMDLINE, _cmdline, "", field_type_t::UNESCAPED);
 
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
@@ -657,7 +657,7 @@
         unescape_raw_field(_unescaped_val, proctitle_field.RawValuePtr(), proctitle_field.RawValueSize());
         ExecveConverter::ConvertRawCmdline(_unescaped_val, _cmdline);
 
-        ret = _builder->AddField(SV_PROCTITLE, _cmdline, nullptr, field_type_t::PROCTITLE);
+        ret = _builder->AddField(SV_PROCTITLE, _cmdline, "", field_type_t::PROCTITLE);
         if (ret != 1) {
             if (ret == Queue::CLOSED) {
                 throw std::runtime_error("Queue closed");
@@ -682,7 +682,7 @@
         for (auto& field: dropped_rec) {
             _field_name.assign(SV_DROPPED);
             _field_name.append(field.FieldName());
-            ret = _builder->AddField(_field_name, field.RawValue(), nullptr, field_type_t::UNCLASSIFIED);
+            ret = _builder->AddField(_field_name, field.RawValue(), "", field_type_t::UNCLASSIFIED);
             if (ret != 1) {
                 if (ret == Queue::CLOSED) {
                     throw std::runtime_error("Queue closed");
@@ -707,7 +707,7 @@
         containerid = p->_containerid;
     }
 
-    ret = _builder->AddField(SV_CONTAINERID, containerid, nullptr, field_type_t::UNCLASSIFIED);
+    ret = _builder->AddField(SV_CONTAINERID, containerid, "", field_type_t::UNCLASSIFIED);
     if (ret != 1) {
         if (ret == Queue::CLOSED) {
             throw std::runtime_error("Queue closed");
@@ -842,7 +842,7 @@
 }
 
 bool RawEventProcessor::add_str_field(const std::string_view& name, const std::string_view& val, field_type_t ft) {
-    int ret = _builder->AddField(name, val, nullptr, ft);
+    int ret = _builder->AddField(name, val, "", ft);
     if (ret != 1) {
         if (ret == Queue::CLOSED) {
             throw std::runtime_error("Queue closed");
diff --git a/RawEventRecord.cpp b/RawEventRecord.cpp
--- a/RawEventRecord.cpp	2020-07-14 13:50:43.000000000 -0700
+++ b/RawEventRecord.cpp	2020-10-15 14:49:06.070654420 -0700
@@ -176,7 +176,7 @@
     }
 
     if (!_node.empty()) {
-        ret = builder.AddField(SV_NODE, _node, nullptr, field_type_t::UNCLASSIFIED);
+        ret = builder.AddField(SV_NODE, _node, "", field_type_t::UNCLASSIFIED);
         if (ret != 1) {
             return ret;
         }
@@ -185,7 +185,7 @@
     // If record is marked as unparsable, then the text (after the 'audit():' section is included as the only value in
     // _record_fields
     if (_unparsable) {
-        ret = builder.AddField(SV_UNPARSED_TEXT, _record_fields[0], nullptr, field_type_t::UNESCAPED);
+        ret = builder.AddField(SV_UNPARSED_TEXT, _record_fields[0], "", field_type_t::UNESCAPED);
         if (ret != 1) {
             return ret;
         }
@@ -195,9 +195,9 @@
     for (auto f: _record_fields) {
         auto idx = f.find_first_of('=');
         if (idx == std::string_view::npos) {
-            ret = builder.AddField(f, std::string_view(), nullptr, field_type_t::UNCLASSIFIED);
+            ret = builder.AddField(f, std::string_view(), "", field_type_t::UNCLASSIFIED);
         } else {
-            ret = builder.AddField(f.substr(0, idx), f.substr(idx + 1), nullptr, field_type_t::UNCLASSIFIED);
+            ret = builder.AddField(f.substr(0, idx), f.substr(idx + 1), "", field_type_t::UNCLASSIFIED);
         }
         if (ret != 1) {
             return ret;
diff --git a/TestEventData.h b/TestEventData.h
--- a/TestEventData.h	2020-07-14 13:50:43.000000000 -0700
+++ b/TestEventData.h	2020-10-15 14:49:48.162233590 -0700
@@ -33,7 +33,12 @@
     field_type_t _field_type;
 
     void Write(const std::shared_ptr<EventBuilder>& builder) {
-        builder->AddField(_name, _raw, _interp, _field_type);
+        if (_interp == nullptr) {
+            builder->AddField(_name, _raw, "", _field_type);
+        }
+        else {
+            builder->AddField(_name, _raw, _interp, _field_type);
+        }
     }
 };
 
