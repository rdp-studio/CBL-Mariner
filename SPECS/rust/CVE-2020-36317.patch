From 4588490cdceb407fd5754045d173be7ea381b794 Mon Sep 17 00:00:00 2001
From: Thomas Crain <thcrain@microsoft.com>
Date: Mon, 26 Apr 2021 12:40:04 -0500
Subject: [PATCH 1/6] Patch CVE-2020-36317

Backporting the following to 1.47.0:
https://github.com/rust-lang/rust/pull/78499
https://github.com/rust-lang/rust/pull/82554
---
 library/alloc/src/string.rs   | 37 ++++++++++++++++++++++-------------
 library/alloc/tests/string.rs | 15 ++++++++++++++
 2 files changed, 38 insertions(+), 14 deletions(-)

diff --git a/library/alloc/src/string.rs b/library/alloc/src/string.rs
index 05690e19d23..9387f4edde3 100644
--- a/library/alloc/src/string.rs
+++ b/library/alloc/src/string.rs
@@ -1231,35 +1231,44 @@ impl String {
     where
         F: FnMut(char) -> bool,
     {
+        struct SetLenOnDrop<'a> {
+            s: &'a mut String,
+            idx: usize,
+            del_bytes: usize,
+        }
+
+        impl<'a> Drop for SetLenOnDrop<'a> {
+            fn drop(&mut self) {
+                let new_len = self.idx - self.del_bytes;
+                debug_assert!(new_len <= self.s.len());
+                unsafe { self.s.vec.set_len(new_len) };
+            }
+        }
+
         let len = self.len();
-        let mut del_bytes = 0;
-        let mut idx = 0;
+        let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };
 
-        while idx < len {
-            let ch = unsafe { self.get_unchecked(idx..len).chars().next().unwrap() };
+        while guard.idx < len {
+            let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };
             let ch_len = ch.len_utf8();
 
             if !f(ch) {
-                del_bytes += ch_len;
-            } else if del_bytes > 0 {
+                guard.del_bytes += ch_len;
+            } else if guard.del_bytes > 0 {
                 unsafe {
                     ptr::copy(
-                        self.vec.as_ptr().add(idx),
-                        self.vec.as_mut_ptr().add(idx - del_bytes),
+                        guard.s.vec.as_ptr().add(guard.idx),
+                        guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),
                         ch_len,
                     );
                 }
             }
 
             // Point idx to the next char
-            idx += ch_len;
+            guard.idx += ch_len;
         }
 
-        if del_bytes > 0 {
-            unsafe {
-                self.vec.set_len(len - del_bytes);
-            }
-        }
+        drop(guard);
     }
 
     /// Inserts a character into this `String` at a byte position.
diff --git a/library/alloc/tests/string.rs b/library/alloc/tests/string.rs
index d38655af78c..61587987172 100644
--- a/library/alloc/tests/string.rs
+++ b/library/alloc/tests/string.rs
@@ -1,6 +1,7 @@
 use std::borrow::Cow;
 use std::collections::TryReserveError::*;
 use std::mem::size_of;
+use std::panic;
 
 pub trait IntoCow<'a, B: ?Sized>
 where
@@ -374,6 +375,20 @@ fn test_retain() {
 
     s.retain(|_| false);
     assert_eq!(s, "");
+
+    let mut s = String::from("0Ã¨0");
+    let _ = panic::catch_unwind(panic::AssertUnwindSafe(|| {
+        let mut count = 0;
+        s.retain(|_| {
+            count += 1;
+            match count {
+                1 => false,
+                2 => true,
+                _ => panic!(),
+            }
+        });
+    }));
+    assert!(std::str::from_utf8(s.as_bytes()).is_ok());
 }
 
 #[test]
-- 
2.25.1
