From d8f0bf57ed1024fe6c6970530f8480b651e2cdcc Mon Sep 17 00:00:00 2001
From: Joe Schmitt <joschmit@microsoft.com>
Date: Thu, 14 Nov 2019 21:54:04 +0000
Subject: [PATCH] Merged PR 221: Add download option to TDNF

Add a `download` command to TDNF that will download RPMs to a directory.

Usage:
- `tdnf download <package1, package2, ...> --destdir /path/to/download/folder>`
- To download a package and all of its dependencies even if the system already has them installed, add the `--alldeps` option.

Behavior:
- `tdnf download` will create the destination directory if it does not exist.
- `tdnf download` will respond to other tdnf options, such as silent, no gpg check, etc.
- `tdnf download` will skip RPMs if the correct version already exists in the destination directory.
- `tdnf download` will check GPG signatures unless otherwise specified.
---
 client/api.c              | 81 +++++++++++++++++++++++++++------------
 client/goal.c             |  3 +-
 client/init.c             |  9 +++++
 client/resolve.c          |  3 +-
 client/rpmtrans.c         | 68 ++++++++++++++++++++++----------
 include/tdnf.h            |  7 ++++
 include/tdnfcli.h         |  6 +++
 include/tdnfclitypes.h    |  6 +++
 include/tdnftypes.h       |  5 ++-
 solv/prototypes.h         |  8 ++--
 solv/tdnfpool.c           |  5 ++-
 solv/tdnfrepo.c           | 57 ++++++++++++++++++++-------
 tools/cli/lib/api.c       | 75 ++++++++++++++++++++++++++++++++++++
 tools/cli/lib/help.c      |  3 ++
 tools/cli/lib/parseargs.c | 10 +++++
 tools/cli/main.c          | 13 ++++++-
 tools/cli/prototypes.h    |  6 +++
 17 files changed, 297 insertions(+), 68 deletions(-)

diff --git a/client/api.c b/client/api.c
index b8f9364..002fe88 100644
--- a/client/api.c
+++ b/client/api.c
@@ -678,8 +678,8 @@ TDNFOpenHandle(
     )
 {
     uint32_t dwError = 0;
+    const int nSkipInstalledRpms = 0;
     PTDNF pTdnf = NULL;
-    PSolvSack pSack = NULL;
 
     if(!pArgs || !ppTdnf)
     {
@@ -702,28 +702,9 @@ TDNFOpenHandle(
     dwError = TDNFLoadPlugins(pTdnf);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = SolvInitSack(
-                  &pSack,
-                  pTdnf->pConf->pszCacheDir,
-                  pTdnf->pArgs->pszInstallRoot);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFLoadRepoData(
-                  pTdnf,
-                  REPOLISTFILTER_ALL,
-                  &pTdnf->pRepos);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFRepoListFinalize(pTdnf);
-    BAIL_ON_TDNF_ERROR(dwError);
-
-    dwError = TDNFRefreshSack(
-                  pTdnf,
-                  pSack,
-                  pTdnf->pArgs->nRefresh);
+    dwError = TDNFResetSack(pTdnf, nSkipInstalledRpms);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    pTdnf->pSack = pSack;
     *ppTdnf = pTdnf;
 
 cleanup:
@@ -738,10 +719,6 @@ error:
     {
         *ppTdnf = NULL;
     }
-    if(pSack)
-    {
-        SolvFreeSack(pSack);
-    }
     goto cleanup;
 }
 
@@ -879,6 +856,60 @@ error:
     goto cleanup;
 }
 
+uint32_t
+TDNFResetSack(
+    PTDNF pTdnf,
+    int nSkipInstalledRpms
+    )
+{
+    uint32_t dwError = 0;
+    PSolvSack pSack = NULL;
+
+    if(!pTdnf)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = SolvInitSack(
+                  &pSack,
+                  pTdnf->pConf->pszCacheDir,
+                  pTdnf->pArgs->pszInstallRoot,
+                  nSkipInstalledRpms);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFLoadRepoData(
+                  pTdnf,
+                  REPOLISTFILTER_ALL,
+                  &pTdnf->pRepos);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFRepoListFinalize(pTdnf);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    dwError = TDNFRefreshSack(
+                  pTdnf,
+                  pSack,
+                  pTdnf->pArgs->nRefresh);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    if (!pTdnf->pSack)
+    {
+        SolvFreeSack(pTdnf->pSack);
+    }
+    pTdnf->pSack = pSack;
+
+cleanup:
+    return dwError;
+
+error:
+    if(pSack)
+    {
+        SolvFreeSack(pSack);
+    }
+    goto cleanup;
+}
+
 //Resolve alter command before presenting
 //the goal steps to user for approval
 uint32_t
diff --git a/client/goal.c b/client/goal.c
index 0f36e0b..34f12e6 100644
--- a/client/goal.c
+++ b/client/goal.c
@@ -30,7 +30,7 @@ TDNFGetPackagesWithSpecifiedType(
     uint32_t dwError = 0;
     uint32_t dwCount = 0;
     PSolvPackageList pPkgList = NULL;
-
+
     if(!pTdnf || !pTdnf->pSack|| !pTrans || !pPkgInfo)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
@@ -509,6 +509,7 @@ TDNFAddGoal(
             break;
         case ALTER_REINSTALL:
         case ALTER_INSTALL:
+        case ALTER_INSTALL_ONLY_DOWNLOAD:
         case ALTER_UPGRADE:
             dwError = SolvAddPkgInstallJob(pQueueJobs, dwId);
             BAIL_ON_TDNF_ERROR(dwError);
diff --git a/client/init.c b/client/init.c
index d08733a..5cc71c4 100644
--- a/client/init.c
+++ b/client/init.c
@@ -36,6 +36,7 @@ TDNFCloneCmdArgs(
                   (void**)&pCmdArgs);
     BAIL_ON_TDNF_ERROR(dwError);
 
+    pCmdArgs->nAllDeps       = pCmdArgsIn->nAllDeps;
     pCmdArgs->nAllowErasing  = pCmdArgsIn->nAllowErasing;
     pCmdArgs->nAssumeNo      = pCmdArgsIn->nAssumeNo;
     pCmdArgs->nAssumeYes     = pCmdArgsIn->nAssumeYes;
@@ -74,6 +75,14 @@ TDNFCloneCmdArgs(
         BAIL_ON_TDNF_ERROR(dwError);
     }
 
+    if(!IsNullOrEmptyString(pCmdArgsIn->pszDestDir))
+    {
+        dwError = TDNFAllocateString(
+                      pCmdArgsIn->pszDestDir,
+                      &pCmdArgs->pszDestDir);
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
     if(!IsNullOrEmptyString(pCmdArgsIn->pszReleaseVer))
     {
         dwError = TDNFAllocateString(
diff --git a/client/resolve.c b/client/resolve.c
index 5353589..f370757 100644
--- a/client/resolve.c
+++ b/client/resolve.c
@@ -348,7 +348,8 @@ TDNFPrepareSinglePkg(
                       pszPkgName);
         BAIL_ON_TDNF_ERROR(dwError);
     }
-    else if (nAlterType == ALTER_INSTALL)
+    else if (nAlterType == ALTER_INSTALL ||
+             nAlterType == ALTER_INSTALL_ONLY_DOWNLOAD)
     {
         dwError = TDNFAddPackagesForInstall(
                       pSack,
diff --git a/client/rpmtrans.c b/client/rpmtrans.c
index d63b559..4b8434d 100644
--- a/client/rpmtrans.c
+++ b/client/rpmtrans.c
@@ -90,8 +90,11 @@ TDNFRpmExecTransaction(
     dwError = TDNFPopulateTransaction(&ts, pTdnf, pSolvedInfo);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = TDNFRunTransaction(&ts, pTdnf);
-    BAIL_ON_TDNF_ERROR(dwError);
+    if (nAlterType != ALTER_INSTALL_ONLY_DOWNLOAD)
+    {
+        dwError = TDNFRunTransaction(&ts, pTdnf);
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
 
 cleanup:
     if(ts.pTS)
@@ -105,7 +108,7 @@ cleanup:
     }
     if(ts.pCachedRpmsArray)
     {
-        if(!nKeepCachedRpms)
+        if(!nKeepCachedRpms && nAlterType != ALTER_INSTALL_ONLY_DOWNLOAD)
         {
             TDNFRemoveCachedRpms(ts.pCachedRpmsArray);
         }
@@ -400,27 +403,51 @@ TDNFTransAddInstallPkg(
     char* pszRpmCacheDir = NULL;
     char* pszFilePath = NULL;
     char* pszFilePathCopy = NULL;
+    char* pszPackageLocationCopy = NULL;
     Header rpmHeader = NULL;
     FD_t fp = NULL;
     char* pszDownloadCacheDir = NULL;
     char* pszUrlGPGKey = NULL;
     PTDNF_CACHED_RPM_ENTRY pRpmCache = NULL;
 
-    dwError = TDNFAllocateStringPrintf(
-                  &pszRpmCacheDir,
-                  "%s/%s/%s",
-                  pTdnf->pConf->pszCacheDir,
-                  pszRepoName,
-                  "rpms");
-    BAIL_ON_TDNF_ERROR(dwError);
+    if (!pTdnf || !pTdnf->pConf)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
 
-    dwError = TDNFAllocateStringPrintf(
-                  &pszFilePath,
-                  "%s/%s",
-                  pszRpmCacheDir,
-                  pszPackageLocation);
+    // dirname() may modify the contents of path, so it may be desirable to
+    // pass a copy when calling this function.
+    dwError = TDNFAllocateString(pszPackageLocation, &pszPackageLocationCopy);
     BAIL_ON_TDNF_ERROR(dwError);
 
+    if (IsNullOrEmptyString(pTdnf->pArgs->pszDestDir))
+    {
+        dwError = TDNFAllocateStringPrintf(
+                    &pszRpmCacheDir,
+                    "%s/%s/%s",
+                    pTdnf->pConf->pszCacheDir,
+                    pszRepoName,
+                    "rpms");
+        BAIL_ON_TDNF_ERROR(dwError);
+
+        dwError = TDNFAllocateStringPrintf(
+                    &pszFilePath,
+                    "%s/%s",
+                    pszRpmCacheDir,
+                    pszPackageLocationCopy);
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+    else
+    {
+        dwError = TDNFAllocateStringPrintf(
+                    &pszFilePath,
+                    "%s/%s",
+                    pTdnf->pArgs->pszDestDir,
+                    basename(pszPackageLocationCopy));
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
     // dirname() may modify the contents of path, so it may be desirable to
     // pass a copy when calling this function.
     dwError = TDNFAllocateString(pszFilePath, &pszFilePathCopy);
@@ -501,11 +528,11 @@ TDNFTransAddInstallPkg(
     }
 
     dwError = rpmtsAddInstallElement(
-                  pTS->pTS,
-                  rpmHeader,
-                  (fnpyKey)pszFilePath,
-                  nUpgrade,
-                  NULL);
+                pTS->pTS,
+                rpmHeader,
+                (fnpyKey)pszFilePath,
+                nUpgrade,
+                NULL);
     BAIL_ON_TDNF_RPM_ERROR(dwError);
 
     if(pTS->pCachedRpmsArray)
@@ -520,6 +547,7 @@ TDNFTransAddInstallPkg(
         pTS->pCachedRpmsArray->pHead = pRpmCache;
     }
 cleanup:
+    TDNF_SAFE_FREE_MEMORY(pszPackageLocationCopy);
     TDNF_SAFE_FREE_MEMORY(pszFilePathCopy);
     TDNF_SAFE_FREE_MEMORY(pszUrlGPGKey);
     TDNF_SAFE_FREE_MEMORY(pszRpmCacheDir);
diff --git a/include/tdnf.h b/include/tdnf.h
index daefaa1..fbe7e24 100644
--- a/include/tdnf.h
+++ b/include/tdnf.h
@@ -152,6 +152,13 @@ TDNFSearchCommand(
     uint32_t* pdwCount
     );
 
+//reset solv goal dependency resolution
+uint32_t
+TDNFResetSack(
+    PTDNF pTdnf,
+    int nSkipInstalledRpms
+    );
+
 //invoke solv goal dependency resolution
 //return solved pkg info which has descriptive
 //info about steps to reach current goal.
diff --git a/include/tdnfcli.h b/include/tdnfcli.h
index 9ad7b98..0afea1c 100644
--- a/include/tdnfcli.h
+++ b/include/tdnfcli.h
@@ -142,6 +142,12 @@ TDNFCliInfoCommand(
     PTDNF_CMD_ARGS pCmdArgs
     );
 
+uint32_t
+TDNFCliDownloadCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    );
+
 uint32_t
 TDNFCliSearchCommand(
     PTDNF_CLI_CONTEXT pContext,
diff --git a/include/tdnfclitypes.h b/include/tdnfclitypes.h
index 65de395..11f76ea 100644
--- a/include/tdnfclitypes.h
+++ b/include/tdnfclitypes.h
@@ -107,6 +107,11 @@ typedef uint32_t
     PTDNF_REPO_DATA *
     );
 
+typedef uint32_t
+(*PFN_TDNF_RESET_SACK)(
+    PTDNF_CLI_CONTEXT,
+    int);
+
 typedef uint32_t
 (*PFN_TDNF_RESOLVE)(
     PTDNF_CLI_CONTEXT,
@@ -148,6 +153,7 @@ typedef struct _TDNF_CLI_CONTEXT_
     PFN_TDNF_LIST               pFnList;
     PFN_TDNF_PROVIDES           pFnProvides;
     PFN_TDNF_REPOLIST           pFnRepoList;
+    PFN_TDNF_RESET_SACK         pFnResetSack;
     PFN_TDNF_RESOLVE            pFnResolve;
     PFN_TDNF_SEARCH             pFnSearch;
     PFN_TDNF_UPDATEINFO         pFnUpdateInfo;
diff --git a/include/tdnftypes.h b/include/tdnftypes.h
index df75732..e58bf12 100644
--- a/include/tdnftypes.h
+++ b/include/tdnftypes.h
@@ -54,7 +54,8 @@ typedef enum
     ALTER_UPGRADE,
     ALTER_UPGRADEALL,
     ALTER_DISTRO_SYNC,
-    ALTER_OBSOLETED
+    ALTER_OBSOLETED,
+    ALTER_INSTALL_ONLY_DOWNLOAD
 }TDNF_ALTERTYPE;
 
 typedef enum
@@ -217,6 +218,7 @@ typedef struct _TDNF_CMD_ARGS
     //Represent options in the dnf cmd line.
     //All options are one to one maps to dnf command line
     //options (incomplete)
+    int nAllDeps;          //add all package dependencies
     int nAllowErasing;     //allow erasures when solving
     int nAssumeNo;         //assume no for all questions
     int nAssumeYes;        //assume yes for all questions
@@ -237,6 +239,7 @@ typedef struct _TDNF_CMD_ARGS
     char* pszInstallRoot;  //set install root
     char* pszConfFile;     //set conf file location
     char* pszReleaseVer;   //Release version
+    char* pszDestDir;      //set destination directory for package downloads
 
     //Commands and args that do not fall in options
     char** ppszCmds;
diff --git a/solv/prototypes.h b/solv/prototypes.h
index b848932..c5246c0 100644
--- a/solv/prototypes.h
+++ b/solv/prototypes.h
@@ -279,7 +279,8 @@ uint32_t
 SolvInitSack(
     PSolvSack *ppSack,
     const char* pszCacheDir,
-    const char* pszRootDir
+    const char* pszRootDir,
+    int nSkipInstalledRpms
     );
 
 
@@ -446,10 +447,11 @@ SolvCountPackages(
     );
 
 uint32_t
-SolvReadInstalledRpms(
+SolvInitializeSystemRepo(
     Pool* pPool,
     Repo** ppRepo,
-    const char* pszCacheFileName
+    const char* pszCacheFileName,
+    int nSkipInstalledRpms
     );
 
 uint32_t
diff --git a/solv/tdnfpool.c b/solv/tdnfpool.c
index b22de1d..6a64f43 100644
--- a/solv/tdnfpool.c
+++ b/solv/tdnfpool.c
@@ -61,7 +61,8 @@ uint32_t
 SolvInitSack(
     PSolvSack *ppSack,
     const char* pszCacheDir,
-    const char* pszRootDir
+    const char* pszRootDir,
+    int nSkipInstalledRpms
     )
 {
     uint32_t dwError = 0;
@@ -109,7 +110,7 @@ SolvInitSack(
     pool_setarch(pPool, systemInfo.machine);
     pool_set_flag(pPool, POOL_FLAG_ADDFILEPROVIDESFILTERED, 1);
 
-    dwError = SolvReadInstalledRpms(pPool, &pRepo, pszCacheDir);
+    dwError = SolvInitializeSystemRepo(pPool, &pRepo, pszCacheDir, nSkipInstalledRpms);
     BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
 
     pool_set_installed(pPool, pRepo);
diff --git a/solv/tdnfrepo.c b/solv/tdnfrepo.c
index 7b416a1..9f3bb47 100644
--- a/solv/tdnfrepo.c
+++ b/solv/tdnfrepo.c
@@ -227,14 +227,52 @@ error:
 uint32_t
 SolvReadInstalledRpms(
     Pool* pPool,
-    Repo** ppRepo,
+    Repo* pRepo,
     const char*  pszCacheFileName
     )
 {
     uint32_t dwError = 0;
-    Repo *pRepo = NULL;
     FILE *pCacheFile = NULL;
     int  dwFlags = 0;
+    if(!pPool || !pRepo)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
+    }
+
+    if(pszCacheFileName)
+    {
+        pCacheFile = fopen(pszCacheFileName, "r");
+    }
+
+    dwFlags = REPO_REUSE_REPODATA | RPM_ADD_WITH_HDRID | REPO_USE_ROOTDIR;
+    dwError = repo_add_rpmdb_reffp(pRepo, pCacheFile, dwFlags);
+
+    if (dwError)
+    {
+        dwError = ERROR_TDNF_SOLV_IO;
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
+    }
+
+cleanup:
+    if (pCacheFile)
+        fclose(pCacheFile);
+    return dwError;
+
+error:
+    goto cleanup;
+}
+
+uint32_t
+SolvInitializeSystemRepo(
+    Pool* pPool,
+    Repo** ppRepo,
+    const char*  pszCacheFileName,
+    int nSkipInstalledRpms
+    )
+{
+    uint32_t dwError = 0;
+    Repo *pRepo = NULL;
     if(!pPool || !ppRepo)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
@@ -248,19 +286,12 @@ SolvReadInstalledRpms(
         BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
     }
 
-    if(pszCacheFileName && access(pszCacheFileName, F_OK) == 0)
+    if (!nSkipInstalledRpms)
     {
-        pCacheFile = fopen(pszCacheFileName, "r");
-        if(!pCacheFile)
-        {
-            dwError = errno;
-            BAIL_ON_TDNF_SYSTEM_ERROR(dwError);
-        }
+        dwError = SolvReadInstalledRpms(pPool, pRepo, pszCacheFileName);
+        BAIL_ON_TDNF_LIBSOLV_ERROR(dwError);
     }
 
-    dwFlags = REPO_REUSE_REPODATA | RPM_ADD_WITH_HDRID | REPO_USE_ROOTDIR;
-    dwError = repo_add_rpmdb_reffp(pRepo, pCacheFile, dwFlags);
-
     if (dwError)
     {
         dwError = ERROR_TDNF_SOLV_IO;
@@ -269,8 +300,6 @@ SolvReadInstalledRpms(
     *ppRepo = pRepo;
 
 cleanup:
-    if (pCacheFile)
-        fclose(pCacheFile);
     return dwError;
 
 error:
diff --git a/tools/cli/lib/api.c b/tools/cli/lib/api.c
index 431dfab..cb9b160 100644
--- a/tools/cli/lib/api.c
+++ b/tools/cli/lib/api.c
@@ -217,6 +217,81 @@ error:
     goto cleanup;
 }
 
+uint32_t
+TDNFCliDownloadCommand(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs
+    )
+{
+    uint32_t dwError = 0;
+    char** ppszPackageArgs = NULL;
+    int nPackageCount = 0;
+    PTDNF_SOLVED_PKG_INFO pSolvedPkgInfo = NULL;
+    int nSilent = 0;
+    const int nSkipInstalledRpms = 1;
+    const TDNF_ALTERTYPE nAlterType = ALTER_INSTALL_ONLY_DOWNLOAD;
+
+    if(!pContext ||
+       !pContext->hTdnf ||
+       !pCmdArgs ||
+       IsNullOrEmptyString(pCmdArgs->pszDestDir))
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    nSilent = pCmdArgs->nNoOutput;
+
+    dwError = TDNFCliParsePackageArgs(
+                  pCmdArgs,
+                  &ppszPackageArgs,
+                  &nPackageCount);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    if (pCmdArgs->nAllDeps)
+    {
+        // On startup, tdnf initializes a libsolv pool and stores the
+        // initialized instance in a SolvSack. This pool contains all RPMs
+        // installed on the system. This data is taken into account during
+        // dependency resolution.
+        //
+        // Since initialization happens so early in the startup process,
+        // there is no clean way of altering it for *only* download commands.
+        //
+        // Instead, reset the SolvSack to generate a new libsolv pool that omits
+        // the system's RPMs. This will force all dependencies of the target
+        // download RPM to be obtained.
+        dwError = pContext->pFnResetSack(pContext, nSkipInstalledRpms);
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    dwError = pContext->pFnResolve(
+                pContext,
+                nAlterType,
+                &pSolvedPkgInfo);
+    BAIL_ON_CLI_ERROR(dwError);
+
+    if(!nSilent && pSolvedPkgInfo->ppszPkgsNotResolved)
+    {
+        dwError = PrintNotAvailable(pSolvedPkgInfo->ppszPkgsNotResolved);
+        BAIL_ON_CLI_ERROR(dwError);
+    }
+
+    dwError = TDNFAlterCommand(
+                pContext->hTdnf,
+                nAlterType,
+                pSolvedPkgInfo);
+    BAIL_ON_CLI_ERROR(dwError);
+
+cleanup:
+    TDNF_CLI_SAFE_FREE_STRINGARRAY(ppszPackageArgs);
+    TDNFCliFreeSolvedPackageInfo(pSolvedPkgInfo);
+    return dwError;
+
+error:
+    goto cleanup;
+}
+
 uint32_t
 TDNFCliInfoCommand(
     PTDNF_CLI_CONTEXT pContext,
diff --git a/tools/cli/lib/help.c b/tools/cli/lib/help.c
index b645ba7..c223ea2 100644
--- a/tools/cli/lib/help.c
+++ b/tools/cli/lib/help.c
@@ -37,7 +37,9 @@ TDNFCliShowHelp(
     printf("\n");
 
     printf("options    [-c [config file]]\n");
+    printf("           [--alldeps]\n");
     printf("           [--debugsolver]\n");
+    printf("           [--destdir [path]]\n");
     printf("           [--disablerepo=<repoid>]\n");
     printf("           [--enablerepo=<repoid>]\n");
     printf("           [--noplugins]\n");
@@ -63,6 +65,7 @@ TDNFCliShowHelp(
     printf("check-update              Check for available package upgrades\n");
     printf("clean                     Remove cached data\n");
     printf("distro-sync               Synchronize installed packages to the latest available versions\n");
+    printf("download                  download a package\n");
     printf("downgrade                 downgrade a package\n");
     printf("erase                     Remove a package or packages from your system\n");
     printf("help                      Display a helpful usage message\n");
diff --git a/tools/cli/lib/parseargs.c b/tools/cli/lib/parseargs.c
index b42b64a..0f1498c 100644
--- a/tools/cli/lib/parseargs.c
+++ b/tools/cli/lib/parseargs.c
@@ -26,6 +26,7 @@ static TDNF_CMD_ARGS _opt = {0};
 //options - incomplete
 static struct option pstOptions[] =
 {
+    {"alldeps",       no_argument, &_opt.nAllDeps, 1},     //--alldeps
     {"allowerasing",  no_argument, &_opt.nAllowErasing, 1},//--allowerasing
     {"assumeno",      no_argument, &_opt.nAssumeNo, 1},    //--assumeno
     {"assumeyes",     no_argument, 0, 'y'},                //--assumeyes
@@ -34,6 +35,7 @@ static struct option pstOptions[] =
     {"config",        required_argument, 0, 'c'},          //-c, --config
     {"debuglevel",    required_argument, 0, 'd'},          //-d, --debuglevel
     {"debugsolver",   no_argument, &_opt.nDebugSolver, 1}, //--debugsolver
+    {"destdir",       required_argument, 0, 0},            //--destdir
     {"disablerepo",   required_argument, 0, 0},            //--disablerepo
     {"enablerepo",    required_argument, 0, 0},            //--enablerepo
     {"errorlevel",    required_argument, 0, 'e'},          //-e --errorlevel
@@ -225,6 +227,7 @@ TDNFCopyOptions(
         BAIL_ON_CLI_ERROR(dwError);
     }
 
+    pArgs->nAllDeps       = pOptionArgs->nAllDeps;
     pArgs->nAllowErasing  = pOptionArgs->nAllowErasing;
     pArgs->nAssumeNo      = pOptionArgs->nAssumeNo;
     pArgs->nAssumeYes     = pOptionArgs->nAssumeYes;
@@ -291,6 +294,13 @@ ParseOption(
                                       optarg);
         BAIL_ON_CLI_ERROR(dwError);
     }
+    else if(!strcasecmp(pszName, "destdir"))
+    {
+        dwError = TDNFAllocateString(
+                      optarg,
+                      &pCmdArgs->pszDestDir);
+        BAIL_ON_CLI_ERROR(dwError);
+    }
     else if(!strcasecmp(pszName, "disablerepo"))
     {
         dwError = AddSetOptWithValues(pCmdArgs,
diff --git a/tools/cli/main.c b/tools/cli/main.c
index d1ef159..d638640 100644
--- a/tools/cli/main.c
+++ b/tools/cli/main.c
@@ -39,6 +39,7 @@ int main(int argc, char* argv[])
         {"count",              TDNFCliCountCommand},
         {"distro-sync",        TDNFCliDistroSyncCommand},
         {"downgrade",          TDNFCliDowngradeCommand},
+        {"download",           TDNFCliDownloadCommand},
         {"erase",              TDNFCliEraseCommand},
         {"help",               TDNFCliHelpCommand},
         {"info",               TDNFCliInfoCommand},
@@ -82,8 +83,9 @@ int main(int argc, char* argv[])
     _context.pFnProvides = TDNFCliInvokeProvides;
     _context.pFnRepoList = TDNFCliInvokeRepoList;
     //Alter and resolve will address commands like
-    //install, upgrade, erase, downgrade, distrosync
+    //install, upgrade, erase, downgrade, download, distrosync
     _context.pFnAlter = TDNFCliInvokeAlter;
+    _context.pFnResetSack = TDNFCliInvokeResetSack;
     _context.pFnResolve = TDNFCliInvokeResolve;
     _context.pFnSearch = TDNFCliInvokeSearch;
     _context.pFnUpdateInfo = TDNFCliInvokeUpdateInfo;
@@ -362,6 +364,15 @@ TDNFCliInvokeRepoList(
     return TDNFRepoList(pContext->hTdnf, nFilter, ppRepos);
 }
 
+uint32_t
+TDNFCliInvokeResetSack(
+    PTDNF_CLI_CONTEXT pContext,
+    int nSkipInstalledRpms
+    )
+{
+    return TDNFResetSack(pContext->hTdnf, nSkipInstalledRpms);
+}
+
 uint32_t
 TDNFCliInvokeResolve(
     PTDNF_CLI_CONTEXT pContext,
diff --git a/tools/cli/prototypes.h b/tools/cli/prototypes.h
index 41fe0f0..053f4a7 100644
--- a/tools/cli/prototypes.h
+++ b/tools/cli/prototypes.h
@@ -91,6 +91,12 @@ TDNFCliInvokeRepoList(
     PTDNF_REPO_DATA *ppRepos
     );
 
+uint32_t
+TDNFCliInvokeResetSack(
+    PTDNF_CLI_CONTEXT pContext,
+    int nSkipInstalledRpms
+    );
+
 uint32_t
 TDNFCliInvokeResolve(
     PTDNF_CLI_CONTEXT pContext,
-- 
2.17.1

