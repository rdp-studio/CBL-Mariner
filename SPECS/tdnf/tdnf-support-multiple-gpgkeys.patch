From b5ddd7cb8d81e78742d2f197f926c65f4de01397 Mon Sep 17 00:00:00 2001
From: Emre Girgin <Emre.Girgin@microsoft.com>
Date: Tue, 12 May 2020 21:05:16 +0000
Subject: [PATCH 1/2] Merged PR 1957: Add support for multiple GPGKeys.

Add support for multiple GPGKeys.
---
 client/defines.h      |   1 +
 client/gpgcheck.c     |  14 +++--
 client/prototypes.h   |   6 +-
 client/repo.c         |  40 ++++++-------
 client/repolist.c     |  12 ++--
 client/rpmtrans.c     |  10 ++--
 client/structs.h      |   2 +-
 common/configreader.c |  62 +++++++++++++++++++
 common/defines.h      |   1 +
 common/prototypes.h   |  20 +++++++
 common/strings.c      | 134 ++++++++++++++++++++++++++++++++++++++++++
 common/utils.c        |   2 +-
 include/tdnferror.h   |   2 +
 include/tdnftypes.h   |   2 +-
 14 files changed, 267 insertions(+), 41 deletions(-)

diff --git a/client/defines.h b/client/defines.h
index cce8862..9625fde 100644
--- a/client/defines.h
+++ b/client/defines.h
@@ -180,6 +180,7 @@ typedef enum
     {ERROR_TDNF_DISTROVERPKG_READ,   "ERROR_TDNF_DISTROVERPKG_READ",   "There was an error reading version of distroverpkg"}, \
     {ERROR_TDNF_INVALID_ALLOCSIZE,   "ERROR_TDNF_INVALID_ALLOCSIZE",   "A memory allocation was requested with an invalid size"}, \
     {ERROR_TDNF_STRING_TOO_LONG,     "ERROR_TDNF_STRING_TOO_LONG",     "Requested string allocation size was too long."}, \
+    {ERROR_TDNF_ARRAY_TOO_LONG,      "ERROR_TDNF_ARRAY_TOO_LONG",      "Requested array size was too long."}, \
     {ERROR_TDNF_NO_ENABLED_REPOS,    "ERROR_TDNF_NO_ENABLED_REPOS",    "There are no enabled repos.\n Run ""tdnf repolist all"" to see the repos you have.\n You can enable repos by\n 1. by passing in --enablerepo <reponame>\n 2. editing repo files in your repodir(usually /etc/yum.repos.d)"}, \
     {ERROR_TDNF_PACKAGELIST_EMPTY,   "ERROR_TDNF_PACKAGELIST_EMPTY",   "Packagelist was empty"}, \
     {ERROR_TDNF_GOAL_CREATE,         "ERROR_TDNF_GOAL_CREATE",         "Error creating goal"}, \
diff --git a/client/gpgcheck.c b/client/gpgcheck.c
index a7712c9..df3316b 100644
--- a/client/gpgcheck.c
+++ b/client/gpgcheck.c
@@ -23,21 +23,27 @@
 uint32_t
 TDNFGPGCheck(
     rpmKeyring pKeyring,
-    const char* pszUrlKeyFile,
+    const char** ppszUrlKeyFiles,
     const char* pszPkgFile
     )
 {
     uint32_t dwError = 0;
     char* pszKeyData = NULL;
+    const char** ppszTemp = NULL;
 
-    if(!pKeyring || IsNullOrEmptyString(pszUrlKeyFile) || !pszPkgFile)
+    if(!pKeyring || IsNullOrEmptyString(ppszUrlKeyFiles) || !pszPkgFile)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_ERROR(dwError);
     }
 
-    dwError = AddKeyToKeyRing(pszUrlKeyFile, pKeyring); 
-    BAIL_ON_TDNF_ERROR(dwError);
+    ppszTemp = ppszUrlKeyFiles;
+    while(ppszTemp && *ppszTemp)
+    {
+        dwError = AddKeyToKeyRing(*ppszTemp, pKeyring);
+        BAIL_ON_TDNF_ERROR(dwError);
+        ++ppszTemp;
+    }
 
     dwError = VerifyRpmSig(pKeyring, pszPkgFile);
     BAIL_ON_TDNF_ERROR(dwError);
diff --git a/client/prototypes.h b/client/prototypes.h
index f4d3e8c..5b2dacf 100644
--- a/client/prototypes.h
+++ b/client/prototypes.h
@@ -57,7 +57,7 @@ VerifyRpmSig(
 uint32_t
 TDNFGPGCheck(
     rpmKeyring pKeyring,
-    const char* pszUrlKeyFile,
+    const char** ppszUrlKeyFiles,
     const char* pszPackage
     );
 
@@ -445,7 +445,7 @@ TDNFGetGPGCheck(
     PTDNF pTdnf,
     const char* pszRepo,
     int* pnGPGCheck,
-    char** ppszUrlGPGKey
+    char*** pppszUrlGPGKeys
     );
 
 uint32_t
@@ -453,7 +453,7 @@ TDNFGetGPGSignatureCheck(
     PTDNF pTdnf,
     const char* pszRepo,
     int* pnGPGSigCheck,
-    char** ppszUrlGPGKey
+    char*** pppszUrlGPGKeys
     );
 
 uint32_t
diff --git a/client/repo.c b/client/repo.c
index af8fec7..4ebf7d7 100644
--- a/client/repo.c
+++ b/client/repo.c
@@ -175,15 +175,15 @@ TDNFGetGPGCheck(
     PTDNF pTdnf,
     const char* pszRepo,
     int* pnGPGCheck,
-    char** ppszUrlGPGKey
+    char*** pppszUrlGPGKeys
     )
 {
     uint32_t dwError = 0;
     PTDNF_REPO_DATA_INTERNAL pRepo = NULL;
     int nGPGCheck = 0;
-    char* pszUrlGPGKey = NULL;
+    char** ppszUrlGPGKeys = NULL;
 
-    if(!pTdnf || !ppszUrlGPGKey || IsNullOrEmptyString(pszRepo) || !pnGPGCheck)
+    if(!pTdnf || !pppszUrlGPGKeys || IsNullOrEmptyString(pszRepo) || !pnGPGCheck)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_ERROR(dwError);
@@ -201,26 +201,26 @@ TDNFGetGPGCheck(
             nGPGCheck = pRepo->nGPGCheck;
             if(nGPGCheck)
             {
-                dwError = TDNFAllocateString(
-                             pRepo->pszUrlGPGKey,
-                             &pszUrlGPGKey);
+                dwError = TDNFAllocateStringArray(
+                             pRepo->ppszUrlGPGKeys,
+                             &ppszUrlGPGKeys);
                 BAIL_ON_TDNF_ERROR(dwError);
             }
         }
     }
 
     *pnGPGCheck = nGPGCheck;
-    *ppszUrlGPGKey = pszUrlGPGKey;
+    *pppszUrlGPGKeys = ppszUrlGPGKeys;
 
 cleanup:
     return dwError;
 
 error:
-    if(ppszUrlGPGKey)
+    if(pppszUrlGPGKeys)
     {
-        *ppszUrlGPGKey = NULL;
+        *pppszUrlGPGKeys = NULL;
     }
-    TDNF_SAFE_FREE_MEMORY(pszUrlGPGKey);
+    TDNF_SAFE_FREE_STRINGARRAY(ppszUrlGPGKeys);
     goto cleanup;
 }
 
@@ -309,16 +309,16 @@ TDNFGetGPGSignatureCheck(
     PTDNF pTdnf,
     const char* pszRepo,
     int* pnGPGSigCheck,
-    char** ppszUrlGPGKey
+    char*** pppszUrlGPGKeys
     )
 {
     uint32_t dwError = 0;
     PTDNF_REPO_DATA_INTERNAL pRepo = NULL;
     int nGPGSigCheck = 0;
     uint32_t dwSkipSignature = 0;
-    char* pszUrlGPGKey = NULL;
+    char** ppszUrlGPGKeys = NULL;
 
-    if(!pTdnf || !ppszUrlGPGKey || IsNullOrEmptyString(pszRepo) || !pnGPGSigCheck)
+    if(!pTdnf || !pppszUrlGPGKeys || IsNullOrEmptyString(pszRepo) || !pnGPGSigCheck)
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_ERROR(dwError);
@@ -340,26 +340,26 @@ TDNFGetGPGSignatureCheck(
             nGPGSigCheck = pRepo->nGPGCheck;
             if(nGPGSigCheck)
             {
-                dwError = TDNFAllocateString(
-                             pRepo->pszUrlGPGKey,
-                             &pszUrlGPGKey);
+                dwError = TDNFAllocateStringArray(
+                             pRepo->ppszUrlGPGKeys,
+                             &ppszUrlGPGKeys);
                 BAIL_ON_TDNF_ERROR(dwError);
             }
         }
     }
 
     *pnGPGSigCheck = nGPGSigCheck;
-    *ppszUrlGPGKey = pszUrlGPGKey;
+    *pppszUrlGPGKeys = ppszUrlGPGKeys;
 
 cleanup:
     return dwError;
 
 error:
-    if(ppszUrlGPGKey)
+    if(pppszUrlGPGKeys)
     {
-        *ppszUrlGPGKey = NULL;
+        *pppszUrlGPGKeys = NULL;
     }
-    TDNF_SAFE_FREE_MEMORY(pszUrlGPGKey);
+    TDNF_SAFE_FREE_STRINGARRAY(ppszUrlGPGKeys);
     goto cleanup;
 }
 
diff --git a/client/repolist.c b/client/repolist.c
index f61219f..de86105 100644
--- a/client/repolist.c
+++ b/client/repolist.c
@@ -270,11 +270,11 @@ TDNFLoadReposFromFile(
                       &pRepo->nGPGCheck);
         BAIL_ON_TDNF_ERROR(dwError);
 
-        dwError = TDNFReadKeyValue(
+        dwError = TDNFReadKeyValueArray(
                       pSections,
                       TDNF_REPO_KEY_GPGKEY,
                       NULL,
-                      &pRepo->pszUrlGPGKey);
+                      &pRepo->ppszUrlGPGKeys);
         BAIL_ON_TDNF_ERROR(dwError);
 
         dwError = TDNFReadKeyValue(
@@ -516,9 +516,9 @@ TDNFCloneRepo(
                   &pRepo->pszMetaLink);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = TDNFSafeAllocateString(
-                  pRepoIn->pszUrlGPGKey,
-                  &pRepo->pszUrlGPGKey);
+    dwError = TDNFAllocateStringArray(
+                    pRepoIn->ppszUrlGPGKeys,
+                    &pRepo->ppszUrlGPGKeys);
     BAIL_ON_TDNF_ERROR(dwError);
 
     *ppRepo = pRepo;
@@ -551,7 +551,7 @@ TDNFFreeReposInternal(
         TDNF_SAFE_FREE_MEMORY(pRepo->pszName);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszBaseUrl);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszMetaLink);
-        TDNF_SAFE_FREE_MEMORY(pRepo->pszUrlGPGKey);
+        TDNF_SAFE_FREE_STRINGARRAY(pRepo->ppszUrlGPGKeys);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszUser);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszPass);
         pRepos = pRepo->pNext;
diff --git a/client/rpmtrans.c b/client/rpmtrans.c
index 82c203b..d776d30 100644
--- a/client/rpmtrans.c
+++ b/client/rpmtrans.c
@@ -479,7 +479,7 @@ TDNFTransAddInstallPkg(
     Header rpmHeader = NULL;
     FD_t fp = NULL;
     char* pszDownloadCacheDir = NULL;
-    char* pszUrlGPGKey = NULL;
+    char** ppszUrlGPGKeys = NULL;
     PTDNF_CACHED_RPM_ENTRY pRpmCache = NULL;
 
     if (!pTdnf || !pTdnf->pConf)
@@ -564,11 +564,11 @@ TDNFTransAddInstallPkg(
 
     //Check override, then repo config and launch
     //gpg check if needed
-    dwError = TDNFGetGPGSignatureCheck(pTdnf, pszRepoName, &nGPGSigCheck, &pszUrlGPGKey);
+    dwError = TDNFGetGPGSignatureCheck(pTdnf, pszRepoName, &nGPGSigCheck, &ppszUrlGPGKeys);
     BAIL_ON_TDNF_ERROR(dwError);
     if(nGPGSigCheck)
     {
-        dwError = TDNFGPGCheck(pTS->pKeyring, pszUrlGPGKey, pszFilePath);
+        dwError = TDNFGPGCheck(pTS->pKeyring, ppszUrlGPGKeys, pszFilePath);
         BAIL_ON_TDNF_ERROR(dwError);
     }
 
@@ -591,7 +591,7 @@ TDNFTransAddInstallPkg(
     }
     BAIL_ON_TDNF_RPM_ERROR(dwError);
 
-    dwError = TDNFGetGPGCheck(pTdnf, pszRepoName, &nGPGCheck, &pszUrlGPGKey);
+    dwError = TDNFGetGPGCheck(pTdnf, pszRepoName, &nGPGCheck, &ppszUrlGPGKeys);
     BAIL_ON_TDNF_ERROR(dwError);
     if (!nGPGCheck)
     {
@@ -621,7 +621,7 @@ TDNFTransAddInstallPkg(
 cleanup:
     TDNF_SAFE_FREE_MEMORY(pszPackageLocationCopy);
     TDNF_SAFE_FREE_MEMORY(pszFilePathCopy);
-    TDNF_SAFE_FREE_MEMORY(pszUrlGPGKey);
+    TDNF_SAFE_FREE_STRINGARRAY(ppszUrlGPGKeys);
     TDNF_SAFE_FREE_MEMORY(pszRpmCacheDir);
     if(fp)
     {
diff --git a/client/structs.h b/client/structs.h
index 28c9022..9c86eec 100644
--- a/client/structs.h
+++ b/client/structs.h
@@ -41,7 +41,7 @@ typedef struct _TDNF_REPO_DATA_INTERNAL_
     char* pszName;
     char* pszBaseUrl;
     char* pszMetaLink;
-    char* pszUrlGPGKey;
+    char** ppszUrlGPGKeys;
     char* pszSSLCaCert;
     char* pszSSLClientCert;
     char* pszSSLClientKey;
diff --git a/common/configreader.c b/common/configreader.c
index ba37760..aa8d374 100644
--- a/common/configreader.c
+++ b/common/configreader.c
@@ -654,3 +654,64 @@ error:
     goto cleanup;
 }
 
+
+uint32_t
+TDNFReadKeyValueArray(
+    PCONF_SECTION pSection,
+    const char* pszKeyName,
+    const char** ppszDefault,
+    char*** pppszValue
+    )
+{
+    uint32_t dwError = 0;
+    char* pszVal = NULL;
+    char** ppszValue = NULL;
+    PKEYVALUE pKeyValues = NULL;
+
+    if(!pSection || !pszKeyName || !pppszValue)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    pKeyValues = pSection->pKeyValues;
+    for(; pKeyValues; pKeyValues = pKeyValues->pNext)
+    {
+        if(strcmp(pszKeyName, pKeyValues->pszKey) == 0)
+        {
+            dwError = TDNFAllocateString(pKeyValues->pszValue, &pszVal);
+            BAIL_ON_TDNF_ERROR(dwError);
+            break;
+        }
+    }
+
+    if(pszVal)
+    {
+        dwError = TDNFSplitStringIntoStringArray(
+                      pszVal,
+                      &ppszValue);
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+    else if(ppszDefault)
+    {
+        dwError = TDNFAllocateStringArray(
+                      ppszDefault,
+                      &ppszValue);
+        BAIL_ON_TDNF_ERROR(dwError);
+
+    }
+
+    *pppszValue = ppszValue;
+
+cleanup:
+    TDNF_SAFE_FREE_MEMORY(pszVal);
+    return dwError;
+
+error:
+    if(pppszValue)
+    {
+        *pppszValue = NULL;
+    }
+    TDNF_SAFE_FREE_STRINGARRAY(ppszValue);
+    goto cleanup;
+}
diff --git a/common/defines.h b/common/defines.h
index 39c19ea..8c87874 100644
--- a/common/defines.h
+++ b/common/defines.h
@@ -63,3 +63,4 @@
     } while(0)
 
 #define TDNF_DEFAULT_MAX_STRING_LEN       16384000
+#define TDNF_DEFAULT_MAX_ARRAY_LEN        16384000
diff --git a/common/prototypes.h b/common/prototypes.h
index 6a8a2a1..a681f13 100644
--- a/common/prototypes.h
+++ b/common/prototypes.h
@@ -86,6 +86,18 @@ TDNFFreeStringArrayWithCount(
     int nCount
     );
 
+uint32_t
+TDNFAllocateStringArray(
+    const char** ppszSrc,
+    char*** pppszDst
+    );
+
+uint32_t
+TDNFSplitStringIntoStringArray(
+    const char* pszSrc,
+    char*** pppszDst
+    );
+
 //configreader.c
 void
 TDNFPrintConfigData(
@@ -114,6 +126,14 @@ TDNFReadKeyValue(
     char** ppszValue
     );
 
+uint32_t
+TDNFReadKeyValueArray(
+    PCONF_SECTION pSection,
+    const char* pszKeyName,
+    const char** ppszDefault,
+    char*** pppszValue
+    );
+
 uint32_t
 TDNFReadKeyValueBoolean(
     PCONF_SECTION pSection,
diff --git a/common/strings.c b/common/strings.c
index fa26256..17fdf7c 100644
--- a/common/strings.c
+++ b/common/strings.c
@@ -293,3 +293,137 @@ error:
     TDNF_SAFE_FREE_MEMORY(pszTempReplace);
     goto cleanup;
 }
+
+
+uint32_t
+TDNFSplitStringIntoStringArray(
+    const char*   pszSrc,
+    char*** pppszDst
+    )
+{
+    uint32_t dwError = 0;
+    char** ppszDst = NULL;
+    const char* pszSrcTemp = NULL;
+    char** ppszDstTemp = NULL;
+    uint32_t dwNumElements = 0;
+    char* pszSrcCopy = NULL;
+    const char* pszSpaceDelimiter = " ";
+
+    if(!pszSrc || !pppszDst)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = TDNFAllocateString(pszSrc, &pszSrcCopy);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    // Count how many strings are in this array.
+    pszSrcTemp = pszSrcCopy;
+    while(pszSrcTemp && *pszSrcTemp &&
+            (dwNumElements <= TDNF_DEFAULT_MAX_ARRAY_LEN))
+    {
+        ++dwNumElements;
+        while (pszSrcTemp && *pszSrcTemp && *pszSrcTemp != ' ') {
+            ++pszSrcTemp;
+        }
+        while (pszSrcTemp && *pszSrcTemp == ' ') {
+            ++pszSrcTemp;
+        }
+    }
+
+    if(dwNumElements > TDNF_DEFAULT_MAX_ARRAY_LEN)
+    {
+        dwError = ERROR_TDNF_ARRAY_TOO_LONG;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = TDNFAllocateMemory(dwNumElements + 1, sizeof(pszSrcCopy), (void**)&ppszDst);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    ppszDstTemp = ppszDst;
+    pszSrcTemp = strtok(pszSrcCopy, pszSpaceDelimiter);
+    while(pszSrcTemp != NULL)
+    {
+
+        dwError = TDNFAllocateString(pszSrcTemp, ppszDstTemp);
+        BAIL_ON_TDNF_ERROR(dwError);
+        // NULL arg tells strtok to use the previous succesfull call.
+        pszSrcTemp = strtok(NULL, pszSpaceDelimiter);
+        ++ppszDstTemp;
+    }
+    *ppszDstTemp = NULL;
+
+    *pppszDst = ppszDst;
+
+cleanup:
+    TDNF_SAFE_FREE_MEMORY(pszSrcCopy);
+    return dwError;
+
+error:
+    if(pppszDst)
+    {
+        *pppszDst = NULL;
+    }
+    TDNF_SAFE_FREE_STRINGARRAY(ppszDst);
+    goto cleanup;
+}
+
+uint32_t
+TDNFAllocateStringArray(
+    const char**  ppszSrc,
+    char*** pppszDst
+    )
+{
+    uint32_t dwError = 0;
+    char** ppszDst = NULL;
+    const char** ppszSrcTemp = NULL;
+    char** ppszDstTemp = NULL;
+    uint32_t dwNumElements = 0;
+
+    if(!ppszSrc || !pppszDst)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    ppszSrcTemp = ppszSrc;
+    while(ppszSrcTemp && *ppszSrcTemp &&
+            (dwNumElements <= TDNF_DEFAULT_MAX_ARRAY_LEN))
+    {
+        ++dwNumElements;
+        ++ppszSrcTemp;
+    }
+
+    if(dwNumElements > TDNF_DEFAULT_MAX_ARRAY_LEN)
+    {
+        dwError = ERROR_TDNF_ARRAY_TOO_LONG;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+
+    dwError = TDNFAllocateMemory(dwNumElements + 1, sizeof(*ppszSrc), (void**)&ppszDst);
+    BAIL_ON_TDNF_ERROR(dwError);
+
+    ppszSrcTemp = ppszSrc;
+    ppszDstTemp = ppszDst;
+    while(ppszSrcTemp && *ppszSrcTemp)
+    {
+        TDNFAllocateString(*ppszSrcTemp, ppszDstTemp);
+        ++ppszSrcTemp;
+        ++ppszDstTemp;
+    }
+    *ppszDstTemp = NULL;
+
+    *pppszDst = ppszDst;
+
+cleanup:
+    return dwError;
+
+error:
+    if(pppszDst)
+    {
+        *pppszDst = NULL;
+    }
+    TDNF_SAFE_FREE_STRINGARRAY(ppszDst);
+    goto cleanup;
+}
diff --git a/common/utils.c b/common/utils.c
index 6ee5c22..24ff5c1 100644
--- a/common/utils.c
+++ b/common/utils.c
@@ -359,7 +359,7 @@ TDNFFreeRepos(
         TDNF_SAFE_FREE_MEMORY(pRepo->pszName);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszBaseUrl);
         TDNF_SAFE_FREE_MEMORY(pRepo->pszMetaLink);
-        TDNF_SAFE_FREE_MEMORY(pRepo->pszUrlGPGKey);
+        TDNF_SAFE_FREE_STRINGARRAY(pRepo->ppszUrlGPGKeys);
 
         pRepos = pRepo->pNext;
         TDNF_SAFE_FREE_MEMORY(pRepo);
diff --git a/include/tdnferror.h b/include/tdnferror.h
index 9247d25..d386f65 100644
--- a/include/tdnferror.h
+++ b/include/tdnferror.h
@@ -64,6 +64,8 @@ extern "C" {
 #define ERROR_TDNF_SELF_ERASE               1030
 #define ERROR_TDNF_ERASE_NEEDS_INSTALL      1031
 #define ERROR_TDNF_OPERATION_ABORTED        1032
+//
+#define ERROR_TDNF_ARRAY_TOO_LONG           1033
 
 //curl errors
 #define ERROR_TDNF_CURL_INIT                1200
diff --git a/include/tdnftypes.h b/include/tdnftypes.h
index e0fc9c4..c68225e 100644
--- a/include/tdnftypes.h
+++ b/include/tdnftypes.h
@@ -275,7 +275,7 @@ typedef struct _TDNF_REPO_DATA
     char* pszName;
     char* pszBaseUrl;
     char* pszMetaLink;
-    char* pszUrlGPGKey;
+    char** ppszUrlGPGKeys;
     char* pszSSLCaCert;
     char* pszSSLClientCert;
     char* pszSSLClientKey;
-- 
2.25.1


From 97563acbec8bfbe5953c23a314384fde26d61a95 Mon Sep 17 00:00:00 2001
From: Emre Girgin <mrgirgin@microsoft.com>
Date: Wed, 29 Jul 2020 10:06:03 -0700
Subject: [PATCH 2/2] Implement TDNFSafeAllocateStringArray to resolve the
 empty gpgkey string bug.

---
 client/repolist.c   |  2 +-
 common/prototypes.h |  6 ++++++
 common/strings.c    | 26 ++++++++++++++++++++++++++
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/client/repolist.c b/client/repolist.c
index de86105..6eef6ef 100644
--- a/client/repolist.c
+++ b/client/repolist.c
@@ -516,7 +516,7 @@ TDNFCloneRepo(
                   &pRepo->pszMetaLink);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = TDNFAllocateStringArray(
+    dwError = TDNFSafeAllocateStringArray(
                     pRepoIn->ppszUrlGPGKeys,
                     &pRepo->ppszUrlGPGKeys);
     BAIL_ON_TDNF_ERROR(dwError);
diff --git a/common/prototypes.h b/common/prototypes.h
index a681f13..85efaa5 100644
--- a/common/prototypes.h
+++ b/common/prototypes.h
@@ -92,6 +92,12 @@ TDNFAllocateStringArray(
     char*** pppszDst
     );
 
+uint32_t
+TDNFSafeAllocateStringArray(
+    const char** ppszSrc,
+    char*** pppszDst
+    );
+
 uint32_t
 TDNFSplitStringIntoStringArray(
     const char* pszSrc,
diff --git a/common/strings.c b/common/strings.c
index 17fdf7c..8617967 100644
--- a/common/strings.c
+++ b/common/strings.c
@@ -427,3 +427,29 @@ error:
     TDNF_SAFE_FREE_STRINGARRAY(ppszDst);
     goto cleanup;
 }
+
+uint32_t
+TDNFSafeAllocateStringArray(
+    const char** ppszSrc,
+    char*** pppszDst
+    )
+{
+    uint32_t dwError = 0;
+    char** ppszDst = NULL;
+
+    if(!pppszDst)
+    {
+        dwError = ERROR_TDNF_INVALID_PARAMETER;
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+    if(ppszSrc)
+    {
+        dwError = TDNFAllocateStringArray(ppszSrc, &ppszDst);
+        BAIL_ON_TDNF_ERROR(dwError);
+    }
+    *pppszDst = ppszDst;
+cleanup:
+    return dwError;
+error:
+    goto cleanup;
+}
-- 
2.25.1
