From fbcf95ece423431911a0c6f10a0136f752c308fe Mon Sep 17 00:00:00 2001
From: Luca Boccassi <luca.boccassi@microsoft.com>
Date: Wed, 12 Feb 2020 17:27:43 +0000
Subject: [PATCH] portablectl: block when stopping a unit on detach (--now)

If portablectl detach --now is used, there's a possible race condition
where the unit is not stopped in time before the detach is attempted,
which causes it to fail.
Add a DBUS call to block after starting/stopping if --now is passed,
and add a --no-block parameter to skip it optionally when starting,
since it is not necessary in that case for correct functioning.
---
 src/portable/portablectl.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/src/portable/portablectl.c b/src/portable/portablectl.c
index f15ee6145b..a48e022ea6 100644
--- a/src/portable/portablectl.c
+++ b/src/portable/portablectl.c
@@ -39,6 +39,7 @@ static BusTransport arg_transport = BUS_TRANSPORT_LOCAL;
 static char *arg_host = NULL;
 static bool arg_enable = false;
 static bool arg_now = false;
+static bool arg_no_block = false;
 
 static int determine_image(const char *image, bool permit_non_existing, char **ret) {
         int r;
@@ -447,6 +448,7 @@ static int maybe_enable_disable(sd_bus *bus, const char *path, bool enable) {
 }
 
 static int maybe_start_stop(sd_bus *bus, const char *path, bool start) {
+        _cleanup_(bus_wait_for_jobs_freep) BusWaitForJobs *wait = NULL;
         _cleanup_(sd_bus_message_unrefp) sd_bus_message *reply = NULL;
         _cleanup_(sd_bus_error_free) sd_bus_error error = SD_BUS_ERROR_NULL;
         char *name = (char *)path, *job = NULL;
@@ -458,6 +460,12 @@ static int maybe_start_stop(sd_bus *bus, const char *path, bool start) {
         if (arg_reload)
                 name = basename(path);
 
+        if (!arg_no_block || !start) {
+                r = bus_wait_for_jobs_new(bus, &wait);
+                if (r < 0)
+                        return log_error_errno(r, "Could not watch jobs: %m");
+        }
+
         r = sd_bus_call_method(
                         bus,
                         "org.freedesktop.systemd1",
@@ -478,6 +486,17 @@ static int maybe_start_stop(sd_bus *bus, const char *path, bool start) {
         if (!arg_quiet)
                 log_info("Queued %s to %s portable service %s.", job, start ? "start" : "stop", name);
 
+        /* Stopping must always block or the detach will fail if the unit is still running */
+        if (!arg_no_block || !start) {
+                r = bus_wait_for_jobs_add(wait, job);
+                if (r < 0)
+                        return log_error_errno(r, "Failed to watch %s job for %s %s: %m",
+                                               job, start ? "starting" : "stopping", name);
+                r = bus_wait_for_jobs(wait, arg_quiet, NULL);
+                if (r < 0)
+                        return r;
+        }
+
         return 0;
 }
 
@@ -1005,6 +1024,7 @@ static int help(int argc, char *argv[], void *userdata) {
                "                              after attach/detach\n"
                "     --now                    Immediately start/stop the portable service after\n"
                "                              attach/before detach\n"
+               "     --no-block               Don't block waiting for attach --now to complete\n"
                "Commands:\n"
                "  list                        List available portable service images\n"
                "  attach NAME|PATH [PREFIX...]\n"
@@ -1035,6 +1055,7 @@ static int parse_argv(int argc, char *argv[]) {
                 ARG_CAT,
                 ARG_ENABLE,
                 ARG_NOW,
+                ARG_NO_BLOCK,
         };
 
         static const struct option options[] = {
@@ -1053,6 +1074,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "cat",             no_argument,       NULL, ARG_CAT             },
                 { "enable",          no_argument,       NULL, ARG_ENABLE          },
                 { "now",             no_argument,       NULL, ARG_NOW             },
+                { "no-block",        no_argument,       NULL, ARG_NO_BLOCK        },
                 {}
         };
 
@@ -1150,6 +1172,10 @@ static int parse_argv(int argc, char *argv[]) {
                         arg_now = true;
                         break;
 
+                case ARG_NO_BLOCK:
+                        arg_no_block = true;
+                        break;
+
                 case '?':
                         return -EINVAL;
 
-- 
2.20.1

