From 518219f7edbfa230d12d998b9c15fa4196bbb37a Mon Sep 17 00:00:00 2001
From: Henry Beberman <henry.beberman@microsoft.com>
Date: Tue, 31 Mar 2020 09:06:01 +0000
Subject: [PATCH] Backport FOREACH_STRING fix for gcc9

Based on https://github.com/systemd/systemd/commit/fb4986fa95f36f09e33b6e284d384fe369f51b49

---
 src/basic/strv.h          | 15 ++++-----------
 src/nspawn/nspawn.c       |  6 +++---
 src/systemctl/systemctl.c |  4 ++--
 src/test/test-execute.c   |  2 +-
 4 files changed, 10 insertions(+), 17 deletions(-)

diff --git a/src/basic/strv.h b/src/basic/strv.h
index 51d03db940..df25c571de 100644
--- a/src/basic/strv.h
+++ b/src/basic/strv.h
@@ -136,17 +136,10 @@ void strv_print(char **l);
                 _x && strv_contains(STRV_MAKE(__VA_ARGS__), _x); \
         })
 
-#define FOREACH_STRING(x, ...)                               \
-        for (char **_l = ({                                  \
-                char **_ll = STRV_MAKE(__VA_ARGS__);         \
-                x = _ll ? _ll[0] : NULL;                     \
-                _ll;                                         \
-        });                                                  \
-        _l && *_l;                                           \
-        x = ({                                               \
-                _l ++;                                       \
-                _l[0];                                       \
-        }))
+#define FOREACH_STRING(x, y, ...)                                       \
+        for (char **_l = STRV_MAKE(({ x = y; }), ##__VA_ARGS__);        \
+             x;                                                         \
+             x = *(++_l))
 
 char **strv_reverse(char **l);
 char **strv_shell_escape(char **l, const char *bad);
diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index 56877bd932..107c43f5aa 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -1983,11 +1983,11 @@ static int setup_hostname(void) {
 }
 
 static int setup_journal(const char *directory) {
-        sd_id128_t this_id;
         _cleanup_free_ char *d = NULL;
-        const char *p, *q;
-        bool try;
+        const char *dirname, *p, *q;
+        sd_id128_t this_id;
         char id[33];
+        bool try;
         int r;
 
         /* Don't link journals in ephemeral mode */
diff --git a/src/systemctl/systemctl.c b/src/systemctl/systemctl.c
index f072ad0c31..5d9446cddd 100644
--- a/src/systemctl/systemctl.c
+++ b/src/systemctl/systemctl.c
@@ -6768,9 +6768,9 @@ static int run_editor(char **paths) {
         if (r < 0)
                 return r;
         if (r == 0) {
-                const char **args;
+                const char **args, *p;
                 char *editor, **editor_args = NULL;
-                char **tmp_path, **original_path, *p;
+                char **tmp_path, **original_path;
                 size_t n_editor_args = 0, i = 1;
                 size_t argc;
 
diff --git a/src/test/test-execute.c b/src/test/test-execute.c
index fa8efdddd2..d94064c05f 100644
--- a/src/test/test-execute.c
+++ b/src/test/test-execute.c
@@ -106,7 +106,7 @@ invalid:
 }
 
 static bool is_inaccessible_available(void) {
-        char *p;
+        const char *p;
 
         FOREACH_STRING(p,
                 "/run/systemd/inaccessible/reg",
-- 
2.17.1

