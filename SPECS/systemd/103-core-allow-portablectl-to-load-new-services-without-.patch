From bcaae81db2f4eae735c32527632a43920cee536c Mon Sep 17 00:00:00 2001
From: Luca Boccassi <luca.boccassi@microsoft.com>
Date: Thu, 23 Jan 2020 16:51:35 +0000
Subject: [PATCH 3/3] core: allow portablectl to load new services without
 daemon-reload

When using portable services at medium scale on an arm64 8 core board,
by attaching, daemon-reloading and starting each one in a row, at about
40 services the system starts to croak, everything hangs and times out:
sometimes portablectl times out while trying to contact portabled,
sometimes portabled times out while trying to contact systemd, and
sometimes both happen at the same time.

On arm64 qemu the limit is even lower, about 5 services are enough.
A daemon-reload takes between 30 seconds and a minute there, and it's
a heavy operation that stalls the manager in the meanwhile.

Given portable services are most likely leaves, allow to start them
(and only them, by checking that the unit path is in system.attached)
without a daemon-reload.

The same arm64 board with this change shows no issues anymore, tested
with up to 100 portable services.
---
 src/core/manager.c         | 24 +++++++++++++++++++-----
 src/portable/portablectl.c |  5 ++++-
 2 files changed, 23 insertions(+), 6 deletions(-)

diff --git a/src/core/manager.c b/src/core/manager.c
index a4b0b432c4..61e9fb6689 100644
--- a/src/core/manager.c
+++ b/src/core/manager.c
@@ -1910,6 +1910,13 @@ int manager_load_unit_prepare(
         if (!name)
                 name = basename(path);
 
+        /* We might have been given a full path as a name by portablectl attach. */
+        if (!path && is_path(name) &&
+                        (startswith(name, "/etc/systemd/system/") || startswith(name, "/run/systemd/system/"))) {
+                path = name;
+                name = basename(path);
+        }
+
         t = unit_name_to_type(name);
 
         if (t == _UNIT_TYPE_INVALID || !unit_name_is_valid(name, UNIT_NAME_PLAIN|UNIT_NAME_INSTANCE)) {
@@ -1922,13 +1929,20 @@ int manager_load_unit_prepare(
         ret = manager_get_unit(m, name);
         if (ret) {
                 *_ret = ret;
-                return 1;
+                /* If the unit is already known (eg: referenced by a target) but
+                 * it's not loaded yet, and we were given a path where to find it, set
+                 * the state as STUB so that the unit_add_to_*_queue calls load it. */
+                if (ret->load_state == UNIT_NOT_FOUND && path &&
+                                (startswith(path, "/etc/systemd/system/") || startswith(path, "/run/systemd/system/")))
+                        ret->load_state = UNIT_STUB;
+                else
+                        return 1;
+        } else {
+                ret = cleanup_ret = unit_new(m, unit_vtable[t]->object_size);
+                if (!ret)
+                        return -ENOMEM;
         }
 
-        ret = cleanup_ret = unit_new(m, unit_vtable[t]->object_size);
-        if (!ret)
-                return -ENOMEM;
-
         if (path) {
                 ret->fragment_path = strdup(path);
                 if (!ret->fragment_path)
diff --git a/src/portable/portablectl.c b/src/portable/portablectl.c
index 8ec9540786..b182fdbe0d 100644
--- a/src/portable/portablectl.c
+++ b/src/portable/portablectl.c
@@ -447,12 +447,15 @@ static int maybe_enable_disable(sd_bus *bus, const char *path, bool enable) {
 static int maybe_start_stop(sd_bus *bus, const char *path, bool start) {
         _cleanup_(sd_bus_message_unrefp) sd_bus_message *reply = NULL;
         _cleanup_(sd_bus_error_free) sd_bus_error error = SD_BUS_ERROR_NULL;
-        char *name = (char *)basename(path), *job = NULL;
+        char *name = (char *)path, *job = NULL;
         int r;
 
         if (!arg_now)
                 return 0;
 
+        if (arg_reload)
+                name = basename(path);
+
         r = sd_bus_call_method(
                         bus,
                         "org.freedesktop.systemd1",
-- 
2.20.1

