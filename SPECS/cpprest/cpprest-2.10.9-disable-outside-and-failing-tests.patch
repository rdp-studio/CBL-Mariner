diff --git a/Release/tests/functional/http/client/CMakeLists.txt b/Release/tests/functional/http/client/CMakeLists.txt
index 45f0d9af..0a379c2b 100644
--- a/Release/tests/functional/http/client/CMakeLists.txt
+++ b/Release/tests/functional/http/client/CMakeLists.txt
@@ -12,7 +12,6 @@ set(SOURCES
   multiple_requests.cpp
   oauth1_tests.cpp
   oauth2_tests.cpp
-  outside_tests.cpp
   pipeline_stage_tests.cpp
   progress_handler_tests.cpp
   proxy_tests.cpp
diff --git a/Release/tests/functional/http/client/authentication_tests.cpp b/Release/tests/functional/http/client/authentication_tests.cpp
index c0440fed..afa4a666 100644
--- a/Release/tests/functional/http/client/authentication_tests.cpp
+++ b/Release/tests/functional/http/client/authentication_tests.cpp
@@ -675,9 +675,13 @@ SUITE(authentication_tests)
         VERIFY_ARE_EQUAL(return_code, response.status_code());
     }
 
+/*
     TEST(auth_no_data) { auth_test_impl(false); }
+*/
 
+/*
     TEST(unsuccessful_auth_with_basic_cred) { auth_test_impl(true); }
+*/
 
     TEST_FIXTURE(uri_address, set_user_options_asio_http)
     {
@@ -695,6 +699,7 @@ SUITE(authentication_tests)
         VERIFY_ARE_EQUAL(200, response.status_code());
     }
 
+/*
     TEST_FIXTURE(uri_address, set_user_options_asio_https)
     {
         handle_timeout([] {
@@ -714,6 +719,7 @@ SUITE(authentication_tests)
             VERIFY_IS_FALSE(v.empty());
         });
     }
+*/
 
 #endif
 
diff --git a/Release/tests/functional/http/client/client_construction.cpp b/Release/tests/functional/http/client/client_construction.cpp
index 1229b2cf..84d1b636 100644
--- a/Release/tests/functional/http/client/client_construction.cpp
+++ b/Release/tests/functional/http/client/client_construction.cpp
@@ -40,6 +40,7 @@ SUITE(client_construction)
         http_client c3(utility::string_t(U("http://localhost:4567/")));
     }
 
+/*
     // Tests different variations on specifying the URI in http_client constructor.
     TEST_FIXTURE(uri_address, different_uris)
     {
@@ -54,6 +55,7 @@ SUITE(client_construction)
             test_connection(scoped.server(), &client, expected_paths[i]);
         }
     }
+*/
 
     // Helper function verifies that when constructing an http_client with given
     // URI std::invalid_argument is thrown.
diff --git a/Release/tests/functional/http/client/connections_and_errors.cpp b/Release/tests/functional/http/client/connections_and_errors.cpp
index 22e0fc82..f2a848e5 100644
--- a/Release/tests/functional/http/client/connections_and_errors.cpp
+++ b/Release/tests/functional/http/client/connections_and_errors.cpp
@@ -343,6 +343,7 @@ SUITE(connections_and_errors)
         response.content_ready().wait();
     }
 
+/*
     TEST_FIXTURE(uri_address, cancel_with_error)
     {
         http_client c(m_uri);
@@ -358,6 +359,7 @@ SUITE(connections_and_errors)
         // All errors after cancellation are ignored.
         VERIFY_THROWS_HTTP_ERROR_CODE(responseTask.get(), std::errc::operation_canceled);
     }
+*/
 
     TEST_FIXTURE(uri_address, cancel_while_uploading_data)
     {
@@ -416,6 +418,7 @@ SUITE(connections_and_errors)
     }
 #endif
 
+/*
     // Try to connect to a server on a closed port and cancel the operation.
     TEST_FIXTURE(uri_address, cancel_bad_port)
     {
@@ -447,6 +450,7 @@ SUITE(connections_and_errors)
 
         VERIFY_THROWS_HTTP_ERROR_CODE(t.get(), std::errc::operation_canceled);
     }
+*/
 
 } // SUITE(connections_and_errors)
 
diff --git a/Release/tests/functional/http/client/progress_handler_tests.cpp b/Release/tests/functional/http/client/progress_handler_tests.cpp
index 320bcc5c..f52931e0 100644
--- a/Release/tests/functional/http/client/progress_handler_tests.cpp
+++ b/Release/tests/functional/http/client/progress_handler_tests.cpp
@@ -338,6 +338,7 @@ SUITE(progress_handler_tests)
         VERIFY_THROWS(client.request(msg).get().content_ready().get(), std::invalid_argument);
     }
 
+#if 0
     TEST_FIXTURE(uri_address, data_upload_exception)
     {
         http_client client(m_uri);
@@ -361,6 +362,7 @@ SUITE(progress_handler_tests)
         { /* It is ok if the request does not complete before the server is shutdown */
         }
     }
+#endif
 
     TEST_FIXTURE(uri_address, data_download_exception, "Ignore:Windows", "395")
     {
diff --git a/Release/tests/functional/http/client/to_string_tests.cpp b/Release/tests/functional/http/client/to_string_tests.cpp
index 8ae964f7..9d2466b5 100644
--- a/Release/tests/functional/http/client/to_string_tests.cpp
+++ b/Release/tests/functional/http/client/to_string_tests.cpp
@@ -68,6 +68,7 @@ SUITE(to_string_tests)
             msg.to_string(), mtd, U("/path%20baby/"), U("HTTP/1.1"), expected_headers, body);
     }
 
+/*
     TEST_FIXTURE(uri_address, response_to_string_without_body)
     {
         test_http_server::scoped_server scoped(m_uri);
@@ -98,6 +99,7 @@ SUITE(to_string_tests)
         }
 #endif
     }
+*/
 
     TEST_FIXTURE(uri_address, response_to_string_with_body)
     {
diff --git a/Release/tests/functional/websockets/client/authentication_tests.cpp b/Release/tests/functional/websockets/client/authentication_tests.cpp
index 29536860..5ed0725a 100644
--- a/Release/tests/functional/websockets/client/authentication_tests.cpp
+++ b/Release/tests/functional/websockets/client/authentication_tests.cpp
@@ -93,6 +93,7 @@ SUITE(authentication_tests)
         return false;
     }
 
+/*
     TEST(ssl_test)
     {
         websocket_client client;
@@ -127,6 +128,7 @@ SUITE(authentication_tests)
             throw;
         }
     }
+*/
 
 // These tests are specific to our websocketpp based implementation.
 #if !defined(__cplusplus_winrt)
@@ -159,12 +161,14 @@ SUITE(authentication_tests)
         }
     }
 
+/*
     // Test specifically for server SignalR team hit interesting cases with.
     TEST(sni_with_older_server_test)
     {
         websocket_client client;
         sni_test_impl(client);
     }
+*/
 
     // WinRT doesn't expose option for disabling.
     // No stable server is available to reliably test this.
@@ -194,6 +198,7 @@ SUITE(authentication_tests)
         }
     }
 
+/*
     // Winrt doesn't allow explicitly setting server host for SNI.
     TEST(sni_explicit_hostname)
     {
@@ -204,6 +209,7 @@ SUITE(authentication_tests)
         websocket_client client(config);
         sni_test_impl(client);
     }
+*/
 
     void handshake_error_test_impl(const ::utility::string_t& host)
     {
@@ -225,11 +231,17 @@ SUITE(authentication_tests)
         }
     }
 
+/*
     TEST(self_signed_cert) { handshake_error_test_impl(U("wss://self-signed.badssl.com/")); }
+*/
 
+/*
     TEST(hostname_mismatch) { handshake_error_test_impl(U("wss://wrong.host.badssl.com/")); }
+*/
 
+/*
     TEST(cert_expired) { handshake_error_test_impl(U("wss://expired.badssl.com/")); }
+*/
 
 #endif
 
